import { ReactMarkdown } from 'react-markdown/lib/react-markdown.js';
import * as m from 'react';
import m__default from 'react';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';

var A=Object.defineProperty;var R=Object.getOwnPropertySymbols;var N=Object.prototype.hasOwnProperty,O=Object.prototype.propertyIsEnumerable;var T=(t,e,n)=>e in t?A(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,u=(t,e)=>{for(var n in e||(e={}))N.call(e,n)&&T(t,n,e[n]);if(R)for(var n of R(e))O.call(e,n)&&T(t,n,e[n]);return t};var S=t=>{let e=(t==null?void 0:t.split("-"))||[];return e.length===1?e[0]:e[0]+e.slice(1).map(n=>n[0].toUpperCase()+n.slice(1)).join("")},k=t=>{let e={};return !t||t.length<1||t.forEach(n=>{let[r,a]=n.split(":");if(!(!r&&!a)){if(r&&a){let c=S(r.trim());e[c]=a.trim();return}switch(r){case"underline":e.textDecoration="underline";break;case"line-through":e.textDecoration="line-through";break;case"italic":e.fontStyle="italic";break;case"bold":e.fontWeight="bold";break;case"strike-through":e.textDecoration="line-through";break;case"superscript":e.verticalAlign="super";break;case"subscript":e.verticalAlign="sub";break;}}}),e};var v=/&(?:amp|lt|gt|quot|#39);/g,H=RegExp(v.source),L={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},U=t=>e=>t==null?void 0:t[e],M=U(L),C=t=>t&&H.test(t)?t.replace(v,M):t;var q=({element:t})=>{if(t.tag==="hr")return jsx("hr",{});let e=jsx(p,{x:t.children});return ["h1","h2","h3","h4","h5","h6"].includes(t.tag)?m__default.createElement(t.tag,u({},t.attrs),e):t.tag==="table"?jsx("table",{className:"text-black",children:jsx("tbody",{children:e})}):t.tag==="p"||t.tag==="span"?jsx("p",{children:e}):t.tag==="ul"&&t.children.length?jsx("ul",{children:e}):t.tag==="ol"&&t.children.length?jsx("ol",{children:e}):t.tag==="component"?jsx(p,{x:t}):null},g=q;var f=({x:t})=>{if(Array.isArray(t))return jsx(Fragment,{children:t.map((s,d)=>jsx(f,{x:s},d))});if(t==null)return null;let e=typeof t=="string"?t:t.data,n=k((t==null?void 0:t.style)||""),r=Boolean(n["vertical-align"]==="super"),a=Boolean(n["vertical-align"]==="sub");return ["li","tr","td"].includes(t.tag)?m.createElement(t.tag,u({style:n},t.attrs),m.createElement(f,{x:t.children})):e!=null?m.createElement(r?"sup":a?"sub":"span",{style:n},C(e)):t.tag==="span"&&t.data==null?jsx("span",{children:jsx(f,{x:t.children})}):t.tag==="p"?jsx(g,{element:t}):t.tag==="a"?jsx("a",{href:t.href,target:"_blank",rel:"noopener noreferrer",style:n,children:t.data}):t.tag==="img"||t.tag==="image"?jsx("img",{src:t.src,alt:t.alt,title:t.title}):t.type==="BLOCKQUOTE"?jsxs("blockquote",{children:[jsx("p",{dir:"ltr",children:"QUOTE TEXT"}),jsx("p",{dir:"ltr",children:"-\xA0QUOTE ATTRIBUTION"})]}):null},p=f;var I=({article:t,headerClassName:e,bodyClassName:n,containerClassName:r,renderTitle:a})=>{let c=t==null?void 0:t.contentType;if(console.log("contentType",c),c==="TEXT_MARKDOWN")return jsx("div",{className:r,children:t!=null&&t.content?jsx(ReactMarkdown,{children:String(t.content)}):jsx("span",{children:"No content to display"})});let s=t!=null&&t.content?JSON.parse(t.content):[],d=s.findIndex(h=>["h1","h2","h3","h4","h5","h6","h7","p"].includes(h.tag)),[y]=s.splice(d,1),b=y?jsx(p,{x:y.children}):jsx("span",{children:t==null?void 0:t.title});return jsxs("div",{className:r,children:[jsx("div",{className:e,children:a?a(b):b}),jsx("div",{className:n,children:s==null?void 0:s.map((h,E)=>jsx(g,{element:h,keyElem:E},E))})]})},Q=I;

export { Q as ArticleRenderer };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,