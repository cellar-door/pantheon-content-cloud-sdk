'use strict';

var I = require('react');
var inMemoryCache_js = require('@apollo/client/cache/inmemory/inMemoryCache.js');
var ApolloClient_js = require('@apollo/client/core/ApolloClient.js');
var ApolloProvider_js = require('@apollo/client/react/context/ApolloProvider.js');
var useQuery_js = require('@apollo/client/react/hooks/useQuery.js');
var graphql = require('graphql');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var I__default = /*#__PURE__*/_interopDefault(I);

var M=Object.defineProperty,$=Object.defineProperties;var V=Object.getOwnPropertyDescriptors;var E=Object.getOwnPropertySymbols;var G=Object.prototype.hasOwnProperty,H=Object.prototype.propertyIsEnumerable;var O=(e,r,t)=>r in e?M(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,c=(e,r)=>{for(var t in r||(r={}))G.call(r,t)&&O(e,t,r[t]);if(E)for(var t of E(r))H.call(r,t)&&O(e,t,r[t]);return e},g=(e,r)=>$(e,V(r));var x=(e,r,t)=>new Promise((n,i)=>{var o=a=>{try{s(t.next(a));}catch(p){i(p);}},l=a=>{try{s(t.throw(a));}catch(p){i(p);}},s=a=>a.done?n(a.value):Promise.resolve(a.value).then(o,l);s((t=t.apply(e,r)).next());});var h=function(){return h=Object.assign||function(r){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(r[o]=t[o]);}return r},h.apply(this,arguments)};var m=new Map,_=new Map,L=!0,d=!1;function T(e){return e.replace(/[\s,]+/g," ").trim()}function k(e){return T(e.source.body.substring(e.start,e.end))}function z(e){var r=new Set,t=[];return e.definitions.forEach(function(n){if(n.kind==="FragmentDefinition"){var i=n.name.value,o=k(n.loc),l=_.get(i);l&&!l.has(o)?L&&console.warn("Warning: fragment with name "+i+` already exists.
graphql-tag enforces all fragment names across your application to be unique; read more about
this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names`):l||_.set(i,l=new Set),l.add(o),r.has(o)||(r.add(o),t.push(n));}else t.push(n);}),h(h({},e),{definitions:t})}function Y(e){var r=new Set(e.definitions);r.forEach(function(n){n.loc&&delete n.loc,Object.keys(n).forEach(function(i){var o=n[i];o&&typeof o=="object"&&r.add(o);});});var t=e.loc;return t&&(delete t.startToken,delete t.endToken),e}function J(e){var r=T(e);if(!m.has(r)){var t=graphql.parse(e,{experimentalFragmentVariables:d,allowLegacyFragmentVariables:d});if(!t||t.kind!=="Document")throw new Error("Not a valid GraphQL document.");m.set(r,Y(z(t)));}return m.get(r)}function f(e){for(var r=[],t=1;t<arguments.length;t++)r[t-1]=arguments[t];typeof e=="string"&&(e=[e]);var n=e[0];return r.forEach(function(i,o){i&&i.kind==="Document"?n+=i.loc.source.body:n+=i,n+=e[o+1];}),J(n)}function X(){m.clear(),_.clear();}function B(){L=!1;}function Z(){d=!0;}function K(){d=!1;}var y={gql:f,resetCaches:X,disableFragmentWarnings:B,enableExperimentalFragmentVariables:Z,disableExperimentalFragmentVariables:K};(function(e){e.gql=y.gql,e.resetCaches=y.resetCaches,e.disableFragmentWarnings=y.disableFragmentWarnings,e.enableExperimentalFragmentVariables=y.enableExperimentalFragmentVariables,e.disableExperimentalFragmentVariables=y.disableExperimentalFragmentVariables;})(f||(f={}));f.default=f;var b=f;var W=I__default.default.createContext(null),ee=({client:e,children:r})=>jsxRuntime.jsx(W.Provider,{value:e,children:jsxRuntime.jsx(ApolloProvider_js.ApolloProvider,{client:e.apolloClient,children:r})}),D=()=>{let e=I__default.default.useContext(W);if(!e)throw new Error("Cannot use outside of a PantheonProvider");return e};var N=console,Q={error:()=>{},info:()=>{},warn:()=>{}};var P=class{constructor(r){if(this.host=r.pccHost,this.wsHost=r.pccWsHost||r.pccHost.replace(/^http/,"ws").replace(/^https/,"wss"),this.debug=r.debug||!1,this.logger=this.debug?N:Q,!this.host)throw new Error("Missing Pantheon Content Cloud host");this.apolloClient=new ApolloClient_js.ApolloClient({uri:`${this.host}/query`,cache:new inMemoryCache_js.InMemoryCache}),this.debug&&this.logger.info("PantheonClient initialized with config",r);}};var C=b`
  query ListArticles(
    $contentType: ContentType
    $publishingLevel: PublishingLevel
  ) {
    articles(contentType: $contentType, publishingLevel: $publishingLevel) {
      id
      title
      source
      sourceURL
      keywords
      publishedDate
      publishingLevel
      contentType
    }
  }
`;function te(e,r){return x(this,null,function*(){return (yield e.apolloClient.query({query:C,variables:r})).data.articles})}var A=b`
  query GetArticle(
    $id: String!
    $contentType: ContentType
    $publishingLevel: PublishingLevel
  ) {
    article(
      id: $id
      contentType: $contentType
      publishingLevel: $publishingLevel
    ) {
      id
      title
      content
      source
      sourceURL
      keywords
      publishedDate
      publishingLevel
      contentType
    }
  }
`;function re(e,r,t){return x(this,null,function*(){return (yield e.apolloClient.query({query:A,variables:c({id:r},t)})).data.article})}var ne=(e,r)=>{var s;let{wsHost:t,logger:n}=D(),i=useQuery_js.useQuery(A,{variables:c({id:e},r)}),o=I.useRef(),l=I.useRef();return I.useEffect(()=>{l.current=e;},[e]),I.useEffect(()=>{if(o.current!=null)return;let a=new WebSocket(`${t}/ws`);o.current=a,a.addEventListener("open",()=>{n.info("Connected to the GraphQL backend."),a.send(JSON.stringify({Command:"subchanges",Id:e}));}),a.addEventListener("close",()=>{n.info("%cDisconnected and lonely","color: red;");}),a.addEventListener("message",p=>{let u=JSON.parse(p.data);switch(u.Command){case"refetch":{u.Id===l.current&&(n.info("%cNew content is available - refetching...","color: yellow;"),i.refetch());break}case"doc_gone":{u.Id===l.current&&n.error("Document has been deleted");break}case"debug":{n.info({json:u});break}default:n.error(`Unrecognized command ${u.Command}`,u);}});},[]),I.useEffect(()=>{var a;((a=o.current)==null?void 0:a.readyState)===WebSocket.OPEN&&o.current.send(JSON.stringify({Command:"subchanges",Id:e}));},[e]),I.useEffect(()=>{n.info("%cSuccessfully fetched updated content","color: lime;");},[i.data]),g(c({},i),{article:(s=i.data)==null?void 0:s.article})};var oe=e=>{var t;let r=useQuery_js.useQuery(C,{variables:e});return g(c({},r),{articles:(t=r.data)==null?void 0:t.articles})};var ie=(n=>(n.production="PRODUCTION",n.realtime="REALTIME",n.staging="STAGING",n))(ie||{}),ae=(t=>(t.TEXT_MARKDOWN="TEXT_MARKDOWN",t.TREE_PANTHEON="TREE_PANTHEON",t))(ae||{});

exports.ContentType = ae;
exports.PantheonClient = P;
exports.PantheonProvider = ee;
exports.PublishingLevel = ie;
exports.getArticle = re;
exports.getArticles = te;
exports.useArticle = ne;
exports.useArticles = oe;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,